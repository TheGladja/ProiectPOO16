#include <bits/stdc++.h>

using namespace std;

class Individ
{
    int i;
    int varsta;
    char tip;
    double energie;
    unsigned char viu;

    void hraneste();
    void inmulteste();
    void ataca();
    void imbatraneste();
    void moare();

public:

    Individ (int i, char tip);

    void actualizare();
    int esteviu();
    int gettip();

    friend ostream& operator <<(ostream& out, const Individ& I);
    friend istream& operator >>(istream& in, Individ& I);

};

Individ::Individ(int i, char tip)
{
    int energie;
    this-> i= i;
    this-> tip= tip;
    this-> varsta= 0;
    cout<<"\nEnergia: ";
    cin>>energie;
    this-> energie= energie;
    this-> viu= '1';

}

ostream& operator <<(ostream& out, const Individ& I)
{
    out<<"\nPozitia: "<< I.i;
    out<<"\nVarsta: "<< I.varsta;
    out<<"\nTip: "<< I.tip;
    out<<"\nEnergie: "<< I.energie;
    out<<"\nViu: "<< I.viu<<"\n";
    return out;
}

istream& operator >>(istream& in, Individ& I)
{
    cout<<"\nPozitia: ";
    in>> I.i;
    cout<<"\nTipul: ";
    in>> I.tip;
    return in;
}

void Individ::hraneste()
{
    this-> energie += rand()%10+1;
}

void Individ::inmulteste()
{

}

void Individ::ataca()
{

}

void Individ::imbatraneste()
{

}

void Individ::moare()
{

}

void Individ::actualizare()
{
    hraneste();
    inmulteste();
    ataca();
    imbatraneste();
}

int Individ::esteviu()
{
    if(this-> viu == '1')
        return 1;
    return 0;
}

int Individ::gettip()
{
    return tip;
}

void CitireIndivizi(int n, int a[])
{
    int i;
    cin>>n;
    for(i=0;i<n;i++)
        cin>>a[i];
}

int main()
{
    
    Individ a[31](0,'0');
    
    int n,i;
    
    CitireIndivizi(n,a);
    
    for(i=0;i<n;i++)
    {
        a[i].actualizare();
        if(a[i].esteviu()==1)
            cout<<"\n"<<"Individul urmator este viu.";
        else
            cout<<"\n"<<"Individul urmator nu este viu.";
        cout<<"\n"<<"Tipul individului este: "<<a[i].gettip();
    }

    return 0;
}
